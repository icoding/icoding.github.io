<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江南</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiangnan.in/"/>
  <updated>2018-08-23T15:10:06.093Z</updated>
  <id>http://jiangnan.in/</id>
  
  <author>
    <name>JiangNan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stormUI开启kerberos访问方式</title>
    <link href="http://jiangnan.in/2018/08/13/stormui-on-kerberos/"/>
    <id>http://jiangnan.in/2018/08/13/stormui-on-kerberos/</id>
    <published>2018-08-13T09:41:04.000Z</published>
    <updated>2018-08-23T15:10:06.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows访问stormUI"><a href="#windows访问stormUI" class="headerlink" title="windows访问stormUI"></a>windows访问stormUI</h3><p>前提：请确保hosts文件已经配置好<br>参考文档:<br><a href="https://community.hortonworks.com/content/kbentry/28537/user-authentication-from-windows-workstation-to-hd.html" target="_blank" rel="noopener">https://community.hortonworks.com/content/kbentry/28537/user-authentication-from-windows-workstation-to-hd.html</a></p><p>测试步骤：<br>安装MIT Kerberos客户端(windows版)<br>安装windows版火狐浏览器<br>在火狐中启用Kerberos支持<br>通过Kerberos客户端获得kerberos票据<br>通过火狐打开storm ui界面  </p><h4 id="安装MIT-Kerberos客户端-windows版"><a href="#安装MIT-Kerberos客户端-windows版" class="headerlink" title="安装MIT Kerberos客户端(windows版)"></a>安装MIT Kerberos客户端(windows版)</h4><p>64位版下载地址：<a href="http://web.mit.edu/kerberos/dist/kfw/4.0/kfw-4.0.1-amd64.msi" target="_blank" rel="noopener">http://web.mit.edu/kerberos/dist/kfw/4.0/kfw-4.0.1-amd64.msi</a><br>安装的默认目录是C:\Program Files\MIT\Kerberos。<br>为避免意外使用complete模式安装,直接下一步即可。<br><img src="1.png" alt=""></p><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>软件安装完成后它就自动的在 PATH 里面加上了自己的环境变量。<br>但是如果系统以及安装了oracle jdk ，那么oraclejdk里面也会带 kinit, ktab, klist 等软件，所以为了避免调用错误，将新建的kerberos环境变量放在前面。<br>如下：  C:\Program Files\MIT\Kerberos\bin;C:\ProgramData\Oracle\Java\javapath;  %SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;  %SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;<br>如图：可以手动将windows环境变量中的安装的mit放到最前面。<br><img src="2.png" alt=""></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将HDP集群的/etc/krb5.conf复制到一个目录（该用户有该目录的权限）下，改名为krb5.ini。<br>在windows下添加两个环境变量：<br>KRB5_CONFIG=C:\etc\krb5.ini<br>KRB5CCNAME=C:\etc\tmp\krb5cache<br>其中etc\tmp目录必须有写权限<br><img src="3.png" alt=""><br><img src="4.png" alt=""></p><h4 id="使用keytab进行认证"><a href="#使用keytab进行认证" class="headerlink" title="使用keytab进行认证"></a>使用keytab进行认证</h4><p>hdp 集群中storm ui安装在100机器上，进入机器/etc/security/keytabs/目录<br>可以找到spnego.service.keytab、storm.headless.keytab<br>其中storm.headless.keytab对应princal 是<a href="mailto:storm-jn@JN.IN" target="_blank" rel="noopener">storm-jn@JN.IN</a> 对storm进行认证<br>spnego.service.keytab 对应princal 是<a href="mailto:HTTP/bgs-4p100-jiangnan@JN.IN" target="_blank" rel="noopener">HTTP/bgs-4p100-jiangnan@JN.IN</a><br>此处将这两个keytab下载到本地<br><img src="5.png" alt=""><br><img src="6.png" alt=""><br>在cmd中进行kinit操作<br>kinit -kt C:\etc\spnego.service.keytab <a href="mailto:HTTP/bgs-4p100-jiangnan@JN.IN" target="_blank" rel="noopener">HTTP/bgs-4p100-jiangnan@JN.IN</a></p><h4 id="在火狐浏览器中验证"><a href="#在火狐浏览器中验证" class="headerlink" title="在火狐浏览器中验证"></a>在火狐浏览器中验证</h4><ol><li>安装windows版火狐浏览器<br><strong>注意！此处验证使用的是32位浏览器，64位浏览器目前无法通过下述方式验证成功</strong>  </li><li>在火狐中启用Kerberos支持<br>参考 <a href="http://storm.apache.org/releases/1.1.2/SECURITY.html#ui-logviewer" target="_blank" rel="noopener">http://storm.apache.org/releases/1.1.2/SECURITY.html#ui-logviewer</a><br><a href="https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.4/bk_security/content/secure-storm-ui.html" target="_blank" rel="noopener">https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.4/bk_security/content/secure-storm-ui.html</a><br>firefox 浏览器,输入 about:config 修改如下配置项  <ol><li>network.negotiate-auth.trusted-uris = <a href="http://bgs-4p100-jiangnan:8744" target="_blank" rel="noopener">http://bgs-4p100-jiangnan:8744</a></li><li>network.auth.use-sspi = false</li><li>network.negotiate-auth.delegation.uris = <a href="http://bgs-4p100-jiangnan:8744" target="_blank" rel="noopener">http://bgs-4p100-jiangnan:8744</a></li><li>network.negotiate-auth.using-native-gsslib = false</li><li>network.negotiate-auth.gsslib = C:\Program Files\MIT\Kerberos\bin\gssapi32.dll</li><li>network.negotiate-auth.allow-non-fqdn = true<br>如图：<br><img src="7.jpg" alt=""></li></ol></li><li>打开火狐输入地址：<a href="http://bgs-4p232-luojingzhi:8744/index.html" target="_blank" rel="noopener">http://bgs-4p232-luojingzhi:8744/index.html</a><br>如图<br><img src="8.png" alt=""></li></ol><h3 id="mac系统访问stormUI"><a href="#mac系统访问stormUI" class="headerlink" title="mac系统访问stormUI"></a>mac系统访问stormUI</h3><p>前提，本地配置好集群host</p><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>将HDP集群的/etc/krb5.conf 下载到本地，放置到/etc 目录下<br>如图：<br><img src="9.png" alt=""></p><h4 id="使用keytab进行认证-1"><a href="#使用keytab进行认证-1" class="headerlink" title="使用keytab进行认证"></a>使用keytab进行认证</h4><p>hdp 集群中storm ui安装在100上，进入100   /etc/security/keytabs/<br>可以找到spnego.service.keytab、storm.headless.keytab<br>其中storm.headless.keytab对应princal 是<a href="mailto:storm-jn@JN.IN" target="_blank" rel="noopener">storm-jn@JN.IN</a> 对storm进行认证<br>spnego.service.keytab 对应princal 是<a href="mailto:HTTP/bgs-4p100-jiangnan@JN.IN" target="_blank" rel="noopener">HTTP/bgs-4p100-jiangnan@JN.IN</a><br>此处将这两个keytab下载到本地<br><img src="10.png" alt=""><br>使用kinit命令<br>kinit -kt storm.headless.keytab storm-bfdbdos</p><h4 id="在safari浏览器中验证"><a href="#在safari浏览器中验证" class="headerlink" title="在safari浏览器中验证"></a>在safari浏览器中验证</h4><p>打开safari输入地址：<a href="http://bgs-4p100-jiangnan:8744/index.html" target="_blank" rel="noopener">http://bgs-4p100-jiangnan:8744/index.html</a><br>如图<br><img src="11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;windows访问stormUI&quot;&gt;&lt;a href=&quot;#windows访问stormUI&quot; class=&quot;headerlink&quot; title=&quot;windows访问stormUI&quot;&gt;&lt;/a&gt;windows访问stormUI&lt;/h3&gt;&lt;p&gt;前提：请确保hosts文件已
      
    
    </summary>
    
      <category term="技术" scheme="http://jiangnan.in/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="storm" scheme="http://jiangnan.in/tags/storm/"/>
    
      <category term="kerberos" scheme="http://jiangnan.in/tags/kerberos/"/>
    
      <category term="hadoop" scheme="http://jiangnan.in/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes入门与基础组件简介</title>
    <link href="http://jiangnan.in/2017/06/19/kubernetes-installed/"/>
    <id>http://jiangnan.in/2017/06/19/kubernetes-installed/</id>
    <published>2017-06-19T14:40:04.000Z</published>
    <updated>2018-08-16T16:03:34.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-etcd-k8s-docker"><a href="#安装-etcd-k8s-docker" class="headerlink" title="安装 etcd k8s docker"></a>安装 etcd k8s docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd kubernetes</span><br></pre></td></tr></table></figure><h2 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br><span class="line">tar zxvf go.tar.gz</span><br><span class="line">mv go /usr/local</span><br><span class="line">vim /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">启动etcd</span><br><span class="line">systemctl start etcd</span><br><span class="line">启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line">启动kubernetes</span><br><span class="line">systemctl start kube-apiserver #提供资源对象操作入口 如提交一个创建rc 的命令</span><br><span class="line">systemctl start kube-controller-manager  #内部管理，自动化工作，如根据rc定义完成pod 复制 根据service 与pod关系完成endpoint创建， node发现 等</span><br><span class="line">systemctl start kube-scheduler #调度器负责pod调度分配</span><br><span class="line">systemctl start kubelet #负责本node节点上pod 的创建、修改、监控、删除 生命周期管理</span><br><span class="line">systemctl start kube-proxy #service 的代理 软件模式的负载均衡</span><br></pre></td></tr></table></figure><h2 id="hello-world-demo"><a href="#hello-world-demo" class="headerlink" title="hello world demo"></a>hello world demo</h2><p>创建文件夹 kube<br>cd kube</p><h3 id="创建redis-master"><a href="#创建redis-master" class="headerlink" title="创建redis-master"></a>创建redis-master</h3><h4 id="创建replicationController"><a href="#创建replicationController" class="headerlink" title="创建replicationController"></a>创建replicationController</h4><p>vim redis-master-controller.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    name: redis-master</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    name: redis-master  #标识对 label为 redis-master 的pod 进行管理</span><br><span class="line">  template: #用于定义pod 与单独定义pod一样</span><br><span class="line">  metadata:</span><br><span class="line">    labels:</span><br><span class="line">      name: redis-master  # 定义label为redis-master 的pod</span><br><span class="line">  spec:</span><br><span class="line">    containers:</span><br><span class="line">    - name: master</span><br><span class="line">      image: kubeguide/redis-master</span><br><span class="line">      ports:</span><br><span class="line">      - containerPort: 6379</span><br></pre></td></tr></table></figure></p><p>创建replicationcontroller<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f redis-master-controller.yaml</span><br></pre></td></tr></table></figure></p><p>提示创建成功后查看rc<br>kubectl get rc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NAME           DESIRED   CURRENT   READY     AGE</span><br><span class="line">redis-master   1         0         0         3m</span><br><span class="line">kubectl describe rc redis-master</span><br><span class="line">Name:           redis-master</span><br><span class="line">Namespace:      default</span><br><span class="line">Image(s):       kubeguide/redis-master</span><br><span class="line">Selector:       name=redis-master</span><br><span class="line">Labels:         name=redis-master</span><br><span class="line">Replicas:       0 current / 1 desired</span><br><span class="line">Pods Status:    0 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">No volumes.</span><br><span class="line">Events:</span><br><span class="line">  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason          Message</span><br><span class="line">  ---------     --------        -----   ----                            -------------   --------        ------          -------</span><br><span class="line">  4m            1m              16      &#123;replication-controller &#125;                       Warning         FailedCreate    Error creating: No API token found for service account &quot;default&quot;, retry after the token is automatically created and added to the service account</span><br></pre></td></tr></table></figure></p><p>查看创建有异常 No API token found for service account<br>解决办法：<br>cd /etc/kubernetes<br>vim apiserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;</span><br><span class="line">修改为</span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota&quot;</span><br></pre></td></tr></table></figure></p><p>重启服务<br>systemctl restart kube-apiserver<br>错误日志可以在 /var/log/messages 查看<br>删除 之前的redis-master 重新创建<br>kubectl delete -f redis-master-controller.yaml<br>kubectl create -f redis-master-controller.yaml<br>查看redis-master 信息<br>kubectl describe replicationcontrollers/redis-master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Name:           redis-master</span><br><span class="line">Namespace:      default</span><br><span class="line">Image(s):       kubeguide/redis-master</span><br><span class="line">Selector:       name=redis-master</span><br><span class="line">Labels:         name=redis-master</span><br><span class="line">Replicas:       1 current / 1 desired</span><br><span class="line">Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">No volumes.</span><br><span class="line">Events:</span><br><span class="line">  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason                  Message</span><br><span class="line">  ---------     --------        -----   ----                            -------------   --------        ------                  -------</span><br><span class="line">  21s           21s             1       &#123;replication-controller &#125;                       Normal          SuccessfulCreate        Created pod: redis-master-7w07m</span><br></pre></td></tr></table></figure></p><p>查看pods信息 kubectl get pods<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-390780338-gvcwp   1/1       Running   0          2m</span><br><span class="line">redis-master-7w07m                    1/1       Running   0          9s</span><br></pre></td></tr></table></figure></p><p>如果需要对replicas 扩容 使用命令：<br>kubectl scale rc redis-master –replicas=3<br>删除 RC并不会影响已经创建好的Pod</p><h4 id="创建Service用于代理pod"><a href="#创建Service用于代理pod" class="headerlink" title="创建Service用于代理pod"></a>创建Service用于代理pod</h4><p>pod 的生命周期相对短可能会被频繁创建，service生命周期长，<br>创建service 用来代理pods<br>编写文件 redis-master-service.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    name: redis-master</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  selector:</span><br><span class="line">    name: redis-master  #选择 label为 redis-master的pod 做 loadbalance</span><br></pre></td></tr></table></figure></p><p>验证创建：<br>kubectl get service redis-master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME           CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">redis-master   10.254.199.198   &lt;none&gt;        6379/TCP   1m</span><br></pre></td></tr></table></figure></p><p>4.2.创建redis-slave<br>创建redis-salve rc<br>vim redis-slave-controller.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    name: redis-slave</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    name: redis-slave</span><br><span class="line">  template:</span><br><span class="line">        metadata:</span><br><span class="line">          labels:</span><br><span class="line">            name: redis-slave</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: slave</span><br><span class="line">            image: kubeguide/guestbook-redis-slave</span><br><span class="line">            env:</span><br><span class="line">            - name: GET_HOSTS_FROM</span><br><span class="line">              value: env</span><br><span class="line">            ports:</span><br><span class="line">            - containerPort: 6379</span><br></pre></td></tr></table></figure></p><p>创建 kubectl create -f redis-slave-controller.yaml<br>验证rc kubectl describe rc redis-slave<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Name:           redis-slave</span><br><span class="line">Namespace:      default</span><br><span class="line">Image(s):       kubeguide/guestbook-redis-slave</span><br><span class="line">Selector:       name=redis-slave</span><br><span class="line">Labels:         name=redis-slave</span><br><span class="line">Replicas:       2 current / 2 desired</span><br><span class="line">Pods Status:    2 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">No volumes.</span><br><span class="line">Events:</span><br><span class="line">  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason                  Message</span><br><span class="line">  ---------     --------        -----   ----                            -------------   --------        ------                  -------</span><br><span class="line">  2m            2m              1       &#123;replication-controller &#125;                       Normal          SuccessfulCreate        Created pod: redis-slave-089b8</span><br><span class="line">  2m            2m              1       &#123;replication-controller &#125;                       Normal          SuccessfulCreate        Created pod: redis-slave-mgwz2</span><br></pre></td></tr></table></figure></p><p>验证pods kubectl get pods<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">kubernetes-bootcamp-390780338-gvcwp   1/1       Running   0          53m</span><br><span class="line">redis-master-7w07m                    1/1       Running   0          51m</span><br><span class="line">redis-slave-089b8                     1/1       Running   0          13m</span><br><span class="line">redis-slave-mgwz2                     1/1       Running   0          13m</span><br></pre></td></tr></table></figure></p><p>创建redis-slave service<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    name: redis-slave</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  selector:</span><br><span class="line">    name: redis-slave</span><br></pre></td></tr></table></figure></p><p>创建 kubectl create -f redis-slave-service.yaml<br>验证 service kubectl describe service redis-slave<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Name:                   redis-slave</span><br><span class="line">Namespace:              default</span><br><span class="line">Labels:                 name=redis-slave</span><br><span class="line">Selector:               name=redis-slave</span><br><span class="line">Type:                   ClusterIP</span><br><span class="line">IP:                     10.254.87.58</span><br><span class="line">Port:                   &lt;unset&gt; 6379/TCP</span><br><span class="line">Endpoints:              172.17.0.4:6379,172.17.0.5:6379</span><br><span class="line">Session Affinity:       None</span><br><span class="line">No events.</span><br></pre></td></tr></table></figure></p><h3 id="创建frontend"><a href="#创建frontend" class="headerlink" title="创建frontend"></a>创建frontend</h3><p>创建 frontend-controller.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: fontend</span><br><span class="line">  labels:</span><br><span class="line">    name: fontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    name: fontend</span><br><span class="line">  template:</span><br><span class="line">        metadata:</span><br><span class="line">          labels:</span><br><span class="line">            name: fontend</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: fontend</span><br><span class="line">            image: kubeguide/guestbook-php-frontend</span><br><span class="line">            env:</span><br><span class="line">            - name: GET_HOSTS_FROM</span><br><span class="line">              value: env</span><br><span class="line">            ports:</span><br><span class="line">            - containerPort: 80</span><br></pre></td></tr></table></figure></p><p>创建 frontend-service.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: fontend</span><br><span class="line">  labels:</span><br><span class="line">    name: fontend</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort #此处nodeport 会在每个 node创建，如本例子开启3个replicas 则3个node都会有 单独的ip和同样的端口 另一种方式叫LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    nodePort: 30001 #30000 ~ 32767</span><br><span class="line">  selector:</span><br><span class="line">    name: fontend</span><br><span class="line">kubectl create -f frontend-controller.yaml</span><br><span class="line">kubectl create -f frontend-service.yaml</span><br></pre></td></tr></table></figure></p><p>验证 rd pods service<br>浏览器打开<a href="http://172.24.8.36:30001/" target="_blank" rel="noopener">http://172.24.8.36:30001/</a>  验证是否成功</p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>创建一个namespace<br>vim namespace-dev.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: development</span><br><span class="line">kubectl create -f namespace-dev.yaml</span><br><span class="line">kubectl get namespace</span><br><span class="line">NAME          STATUS    AGE</span><br><span class="line">default       Active    1d</span><br><span class="line">development   Active    7s</span><br><span class="line">kube-system   Active    1d</span><br><span class="line">可以对上述服务进行指定namespace 在metadata中指定如：</span><br><span class="line">metedata:</span><br><span class="line">  name:fontend</span><br><span class="line">  namespace:development</span><br></pre></td></tr></table></figure></p><h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>volume是能被多个pod使用的共享存储：<br>EmptyDir 临时目录<br>hostPath 宿主机的文件或者目录 注意： 如果在不同node上运行的pod 对于hostpath访问数据可能不一样<br>gcePersistentDisk awsElasticBlockStore nfs iscsi glusterfs rdb gitRepo secret persistentVolumeClaim<br>使用方式如下 以rc hostPath 举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    name: redis-master</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    name: redis-master  #标识对 label为 redis-master 的pod 进行管理</span><br><span class="line">  template: #用于定义pod 与单独定义pod一样</span><br><span class="line">  metadata:</span><br><span class="line">    labels:</span><br><span class="line">      name: redis-master  # 定义label为redis-master 的pod</span><br><span class="line">  spec:</span><br><span class="line">          volumes:</span><br><span class="line">          - name: &quot;persistent-storage&quot;</span><br><span class="line">            hostPath:</span><br><span class="line">              path: &quot;/data&quot;</span><br><span class="line">    containers:</span><br><span class="line">    - name: master</span><br><span class="line">      image: kubeguide/redis-master</span><br><span class="line">      ports:</span><br><span class="line">      - containerPort: 6379</span><br><span class="line">            volumeMounts:</span><br><span class="line">            - name: &quot;persistent-storage&quot;</span><br><span class="line">              mountPath: &quot;/data&quot;</span><br></pre></td></tr></table></figure></p><h2 id="kubernetes安装路径及配置文件详解"><a href="#kubernetes安装路径及配置文件详解" class="headerlink" title="kubernetes安装路径及配置文件详解"></a>kubernetes安装路径及配置文件详解</h2><p>1./usr/bin<br>目录下为k8s 的可执行文件<br>2./usr/lib/systemd/system<br>目录下包含k8s的配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kube-apiserver.service           kubelet.service                  kube-scheduler.service           </span><br><span class="line">kube-controller-manager.service  kube-proxy.service</span><br></pre></td></tr></table></figure></p><p>Master节点需求如下：<br>apiserver.service:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果etcd安装没问题 则修改 apiserver中的After=etcd.service Wants=etcd.service</span><br></pre></td></tr></table></figure></p><p>controller-manage:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cm依赖于etcd 和apiserver</span><br><span class="line">Documentation 目录后</span><br><span class="line">After=etcd.service</span><br><span class="line">After=kube-apiserver.service</span><br><span class="line">Requires=etcd.service</span><br><span class="line">Requires=kube-apiserver.service</span><br></pre></td></tr></table></figure></p><p>kube-scheduler.service:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scheduler也依赖于etcd 和apiserver</span><br><span class="line">Documentation 目录后</span><br><span class="line">After=etcd.service</span><br><span class="line">After=kube-apiserver.service</span><br><span class="line">Requires=etcd.service</span><br><span class="line">Requires=kube-apiserver.service</span><br></pre></td></tr></table></figure></p><p>Node节点需求如下：<br>kubelet.service ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Documentation 目录后</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br></pre></td></tr></table></figure></p><p>kube-proxy.service ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">该服务依赖于linux 的network</span><br><span class="line">Documentation 目录后</span><br><span class="line">After=network.target</span><br></pre></td></tr></table></figure></p><p>3./etc/kubernetes<br>目录下为k8s 的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apiserver           config              controller-manager  kubelet             proxy               scheduler</span><br></pre></td></tr></table></figure></p><p>config:log设置，是否允许允许有特权模式的docker容器，master所在地址<br>apiserver:绑定主机的ip地址，端口号，etcd服务地址，Service所需Cluster ip池，一系列admission控制策略<br>controller-manager：无特别设置<br>scheduler：无特别设置<br>kubelet：绑定主机ip地址，端口号，apiserver地址及其他参数<br>proxy：无特别配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-etcd-k8s-docker&quot;&gt;&lt;a href=&quot;#安装-etcd-k8s-docker&quot; class=&quot;headerlink&quot; title=&quot;安装 etcd k8s docker&quot;&gt;&lt;/a&gt;安装 etcd k8s docker&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
      <category term="技术" scheme="http://jiangnan.in/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="http://jiangnan.in/tags/kubernetes/"/>
    
      <category term="docker" scheme="http://jiangnan.in/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>二叉树路径的和</title>
    <link href="http://jiangnan.in/2017/06/19/binary-tree-path-sum/"/>
    <id>http://jiangnan.in/2017/06/19/binary-tree-path-sum/</id>
    <published>2017-06-19T14:06:19.000Z</published>
    <updated>2018-08-16T16:04:41.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定一个二叉树，找出所有路径中各节点相加总和等于给定 目标值 的路径。<br>一个有效的路径，指的是从根节点到叶节点的路径。</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><p>给定一个二叉树，和 目标值 = 5:<br>     1<br>    / \<br>   2   4<br>  / \<br> 2   3</p><p>返回：<br>[<br>  [1, 2, 2],<br>  [1, 4]<br>]</p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>根据样例给的结果，可以首先看出数据从根节点开始遍历。二叉树的三种遍历方式只有先序遍历符合此要求（二叉树三种遍历方式）。<br>而题目要求一整条路径是指从根节点到叶子节点的路径，可以通过递归方式完成此问题。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.jndemo.demo;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Stack;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给定一个二叉树，找出所有路径中各节点相加总和等于给定 目标值 的路径。</span><br><span class="line"> * 一个有效的路径，指的是从根节点到叶节点的路径。</span><br><span class="line"> *</span><br><span class="line"> * 样例</span><br><span class="line"> * 给定一个二叉树，和 目标值 = 5:</span><br><span class="line"> *       1</span><br><span class="line"> *      / \</span><br><span class="line"> *      2   4</span><br><span class="line"> *     / \</span><br><span class="line"> *    2   3</span><br><span class="line"> * 返回：</span><br><span class="line"> * [</span><br><span class="line"> * [1, 2, 2],</span><br><span class="line"> * [1, 4]</span><br><span class="line"> * ]</span><br><span class="line"> * Created by jiangnan on 17/5/25.</span><br><span class="line"> */</span><br><span class="line">public class BinaryTreePathSum &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param root the root of binary tree</span><br><span class="line">     * @param target an integer</span><br><span class="line">     * @return all valid paths</span><br><span class="line">     */</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; binaryTreePathSum(TreeNode root, int target) &#123;</span><br><span class="line">        // Write your code here</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        if(null == root) return result;</span><br><span class="line">        Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();</span><br><span class="line">        findPath(result, stack, root, 0, target);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public void findPath(List&lt;List&lt;Integer&gt;&gt; result, Stack&lt;Integer&gt; stack , TreeNode node, int sum, int target)&#123;</span><br><span class="line">        sum += node.val;</span><br><span class="line">        stack.push(node.val);</span><br><span class="line">        if(sum==target &amp;&amp; node.left==null &amp;&amp; node.right==null)&#123;</span><br><span class="line">            List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(stack);</span><br><span class="line">            result.add(list);</span><br><span class="line">            stack.pop();</span><br><span class="line">            return;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(node.left!=null) findPath(result,stack,node.left,sum,target);</span><br><span class="line">            if(node.right!=null) findPath(result,stack,node.right,sum,target);</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeNode root = new TreeNode(1);</span><br><span class="line">        TreeNode r_r = new TreeNode(2);</span><br><span class="line">        TreeNode r_l = new TreeNode(4);</span><br><span class="line">        TreeNode r_r_r = new TreeNode(2);</span><br><span class="line">        TreeNode r_r_l = new TreeNode(3);</span><br><span class="line">        root.right = r_r;</span><br><span class="line">        root.left = r_l;</span><br><span class="line">        r_r.left = r_r_l;</span><br><span class="line">        r_r.right = r_r_r;</span><br><span class="line">        BinaryTreePathSum b = new BinaryTreePathSum();</span><br><span class="line">        System.out.println(b.binaryTreePathSum(root,5));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static  class TreeNode &#123;</span><br><span class="line">          public int val;</span><br><span class="line">          public TreeNode left, right;</span><br><span class="line">          public TreeNode(int val) &#123;</span><br><span class="line">              this.val = val;</span><br><span class="line">              this.left = this.right = null;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出所有路径中各节点相加总和等于给定 目标值 的路径。&lt;br&gt;一个有效的路径，指的是从根节点到叶节点的路径。&lt;/p&gt;
      
    
    </summary>
    
      <category term="技术" scheme="http://jiangnan.in/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://jiangnan.in/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://jiangnan.in/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="lintcode" scheme="http://jiangnan.in/tags/lintcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jiangnan.in/2017/05/31/hello-world/"/>
    <id>http://jiangnan.in/2017/05/31/hello-world/</id>
    <published>2017-05-31T08:59:12.000Z</published>
    <updated>2018-08-13T09:15:57.410Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
